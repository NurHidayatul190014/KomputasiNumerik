{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"KOMPUTASI NUMERIK \u00b6 Nama: Nur Hidayatul Mustafit NIM : 190411100014 Kelas : Komputasi Numerik C Blog ini dibuat untuk memenuhi tugas mata kuliah komputasi numerik","title":"Home"},{"location":"#komputasi_numerik","text":"Nama: Nur Hidayatul Mustafit NIM : 190411100014 Kelas : Komputasi Numerik C Blog ini dibuat untuk memenuhi tugas mata kuliah komputasi numerik","title":"KOMPUTASI NUMERIK"},{"location":"diferensial_biasa/","text":"Materi Persamaan Diferensial Biasa \u00b6 Pengertian Persamaan Diferensial Biasa \u00b6 Persamaan diferensial biasa adalah persamaan yang memuat turunan terhadap satu atau lebih dari variabel-variabel bebas ( independent variables). Jika hanya ada satu variabel bebas yang diasumsikan, maka subyek disebut dengan persamaan diferensial biasa. Berikut dibawah ini merupakan salah satu contoh dari persamaan diferensial biasa: \\dfrac{dy}{dx}=2x+10\\\\ Metode Euler \u00b6 Metode Euler juga disebut metode forward euler adalah prosedur numerik orde pertama untuk menyelesaikan persamaan differensial biasa dengan nilai awal yang diberikan. Metode Euler adalah salah satu dari metode satu langkah yang cara pengerjaannya paling sederhana. Di banding dengan metode lainnya, metode ini paling kurang teliti. Namun demikian untuk memudahkan belajar, metode ini perlu dipelajari mengingat kesederhanaannya dan mudah pemahamannya sehingga memudahkan dalam memperlajari metode lain yang lebih teliti. Metode Euler merupakan metode yang diturunkan dari deret Taylor. Berikut dibawah ini adalah persaman euler: y_{0}=y(x_{0})\\\\ y_{i+1}=y_{i}+hf(x_{i},y_{i})\\ \\ \\ ,untuk \\ i = 1,2,...,n Algoritma Metode Euler \u00b6 Tentukan nilai dari x0 dan y0. Tentukan nilai h yang digunakan. Tentukan banyak iterasi (n) . Lakukan penghitungan menggunakan persamaan diatas. Contoh Soal \u00b6 Gunakan metode euler untuk menyelesaikan persoalan berikut: \\dfrac{dy}{dx}=1+x^2, \\ \\ \\ y(1)= -4 untuk menentukan y(1.01), y(1.02) dan y(1.03). Code \u00b6 # metode euler x1 = float ( input ( \"Masukkan x1= \" )) x2 = float ( input ( \"Masukkan x2= \" )) n = int ( input ( \"masukkan jumlah iterasi= \" )) n += 1 h = 1.01 - x1 xi = - 4 hasil = xi y = 0 for i in range ( n ): print ( \"hasil dari y\" + str ( i ) + \"= \" + str ( hasil )) hasil = xi + h * ( 1 + ( x1 + y ) ** 2 ) y += h xi = hasil Output Masukkan x1 = 1 Masukkan x2 = 1 masukkan jumlah iterasi = 3 hasil dari y0 = - 4 hasil dari y1 = - 3.98 hasil dari y2 = - 3.959799 hasil dari y3 = - 3.9393949999999998","title":"Numerical Solutions of Ordinary Differential equations"},{"location":"diferensial_biasa/#materi_persamaan_diferensial_biasa","text":"","title":"Materi Persamaan Diferensial Biasa"},{"location":"diferensial_biasa/#pengertian_persamaan_diferensial_biasa","text":"Persamaan diferensial biasa adalah persamaan yang memuat turunan terhadap satu atau lebih dari variabel-variabel bebas ( independent variables). Jika hanya ada satu variabel bebas yang diasumsikan, maka subyek disebut dengan persamaan diferensial biasa. Berikut dibawah ini merupakan salah satu contoh dari persamaan diferensial biasa: \\dfrac{dy}{dx}=2x+10\\\\","title":"Pengertian Persamaan Diferensial Biasa"},{"location":"diferensial_biasa/#metode_euler","text":"Metode Euler juga disebut metode forward euler adalah prosedur numerik orde pertama untuk menyelesaikan persamaan differensial biasa dengan nilai awal yang diberikan. Metode Euler adalah salah satu dari metode satu langkah yang cara pengerjaannya paling sederhana. Di banding dengan metode lainnya, metode ini paling kurang teliti. Namun demikian untuk memudahkan belajar, metode ini perlu dipelajari mengingat kesederhanaannya dan mudah pemahamannya sehingga memudahkan dalam memperlajari metode lain yang lebih teliti. Metode Euler merupakan metode yang diturunkan dari deret Taylor. Berikut dibawah ini adalah persaman euler: y_{0}=y(x_{0})\\\\ y_{i+1}=y_{i}+hf(x_{i},y_{i})\\ \\ \\ ,untuk \\ i = 1,2,...,n","title":"Metode Euler"},{"location":"diferensial_biasa/#algoritma_metode_euler","text":"Tentukan nilai dari x0 dan y0. Tentukan nilai h yang digunakan. Tentukan banyak iterasi (n) . Lakukan penghitungan menggunakan persamaan diatas.","title":"Algoritma Metode Euler"},{"location":"diferensial_biasa/#contoh_soal","text":"Gunakan metode euler untuk menyelesaikan persoalan berikut: \\dfrac{dy}{dx}=1+x^2, \\ \\ \\ y(1)= -4 untuk menentukan y(1.01), y(1.02) dan y(1.03).","title":"Contoh Soal"},{"location":"diferensial_biasa/#code","text":"# metode euler x1 = float ( input ( \"Masukkan x1= \" )) x2 = float ( input ( \"Masukkan x2= \" )) n = int ( input ( \"masukkan jumlah iterasi= \" )) n += 1 h = 1.01 - x1 xi = - 4 hasil = xi y = 0 for i in range ( n ): print ( \"hasil dari y\" + str ( i ) + \"= \" + str ( hasil )) hasil = xi + h * ( 1 + ( x1 + y ) ** 2 ) y += h xi = hasil Output Masukkan x1 = 1 Masukkan x2 = 1 masukkan jumlah iterasi = 3 hasil dari y0 = - 4 hasil dari y1 = - 3.98 hasil dari y2 = - 3.959799 hasil dari y3 = - 3.9393949999999998","title":"Code"},{"location":"license/","text":"License \u00b6 MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author \u00b6 Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support_author","text":"Amazon wish list","title":"Support Author"},{"location":"spl/","text":"Materi Sistem Persamaan Linear \u00b6 Pengertian Sistem Persamaan Linear \u00b6 Aljabar linier merupakan cabang dari ilmu matematika yang dapat diaplikasikan dalam berbagai bidang ilmu pengetahuan alam, teknik, komputer, dan masih banyak lagi. Sistem Persamaan Linier merupakan sebuah ungkapan kesamaan dengan menggunakan tanda \"=\" (sama dengan) yang melibatkan suatu konstanta, variabel dan operasi aritmatika. Menyelesaikan suatu sistem persamaan linier adalah mencari nilai-nilai dari sebuah variabel-variabel yang ada pada persamaan linear yang diberikan. Salah satu metode untuk menyelesaikan sistem persamaan linear adalah dengan menggunakan eliminasi gauss. Dibawah ini merupakan bentuk umum dari SPL (Sistem Persamaan Linear): a_{11}x_{1}+a_{12}x_{2}+...+a_{1n}x_{n} = b1\\\\ a_{21}x_{1}+a_{22}x_{2}+...+a_{2n}x_{n} = b2\\\\ a_{31}x_{1}+a_{32}x_{2}+...+a_{3n}x_{n} = b3\\\\ \\vdots\\\\ a_{n1}x_{1}+a_{n2}x_{2}+...+a_{2nn}x_{n} = bn\\\\ Metode Eliminasi Gauss \u00b6 Penyelesaian persamaan linier menggunakan metode eliminasi gauss yakni dengan mengurangi sistem persamaan kedalam bentuk segitiga atas sehingga salah satu persamaan tersebut hanya mengandung satu bilangan yang belum diketahui dan persamaan lainnya terdiri dari bilangan baru. Dalam proses penghitungan dengan menggunakan eliminasi gauss ada 2 tahap yaitu: Eliminasi maju, yaitu untuk membentuk matrix segitiga atas, gambar dibawah ini merupakan contoh segitiga atas. \\begin{pmatrix} a_{11}&a_{12}&a_{13}\\\\ 0&a_{22}&a_{23}\\\\ 0&0&a_{33}\\\\ \\end{pmatrix} Substitusi mundur yaitu penyelesaian dari variabel akhir yang ada didalam matrix segitiga atas. Algoritma dari program metode gauss \u00b6 Masukkan inputan banyaknya variabel Masukkan nilai persamaannya ke dalam array Lalu proses perhitungannya dengan eliminasi maju Dilanjut dengan substitusi mundur lalu hasil akhirnya Code \u00b6 import numpy as np # n menunjukkan banyaknya variabel n = int ( input ( \"masukkan banyak variabel = \" )) # Membuat matrix 2D sesuai dengan total variable # dengan nilai matrix pertama di definisikan seluruhnya 0 a = np . zeros (( n , n + 1 )) # Membuat array 1D untuk menampung hasil solusi x = np . zeros ( n ) # inputan matriks print ( 'Masukkan nilai matriks: ' ) for i in range ( n ): for j in range ( n + 1 ): a [ i ][ j ] = float ( input ( '[' + str ( i ) + '][' + str ( j ) + ']= ' )) # eliminasi maju for i in range ( n ): for j in range ( i + 1 , n ): faktor = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - faktor * a [ i ][ k ] # substitusi mundur x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] # hasil print ( \"hasilnya adalah: \" ) for i in range ( n ): print ( 'X %d = %0.2f ' % ( i , x [ i ])) Metode Jacobi \u00b6 Metode Iterasi Jacobi merupakan metode yang digunakan untuk menyelesaikan permasalahan Persamaan Linier dan sering dijumpai dalam berbagai disiplin ilmu. Metode Iterasi Jacobi merupakan metode tak langsung, yaitu bermula dari suatu hampiran penyelesaian awal dan selanjutnya berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen. Metode Jacobi digunakan untuk menyelesaikan persamaan linier berukuran besar dan proporsi koefisien nolnya besar. dibawah ini merupakan rumus dari metode jacobi: x_{i}^{\\left( k+1\\right) }=\\left( b_{i}-\\sum ^{i-1}_{j=1}a_{ij}x_{j}^{k}-\\sum ^{n}_{j=i+1}a_{ij}x_{j}^{k}\\right) /aii , k= 1,2,...,n Algoritma Code: deifinisikan dahulu persamaanya didalam code masukkan toleransi error yang diinginkan persamaannya akan diulang jika toleransi error dari hasil perulangan mendekati toleransi error yang diinginkan maka program akan berhenti Code: # Mendefinisikan persamaan linear yang akan diselesaikan # dengan menggunakan lambda function untuk mempersingkat function f1 = lambda x , y , z : ( 17 - y + 2 * z ) / 20 f2 = lambda x , y , z : ( - 18 - 3 * x + z ) / 20 f3 = lambda x , y , z : ( 25 - 2 * x + 3 * y ) / 20 x0 = 0 y0 = 0 z0 = 0 count = 1 # Toleransi error yg diinginkan e = float ( input ( 'Masukkan toleransi error: ' )) # Jacobi Iteration print ( ' \\n Count \\t x \\t y \\t z \\n ' ) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x0 , y0 , z0 ) z1 = f3 ( x0 , y0 , z0 ) print ( ' %d \\t %0.4f \\t %0.4f \\t %0.4f \\n ' % ( count , x1 , y1 , z1 )) e1 = abs ( x0 - x1 ) e2 = abs ( y0 - y1 ) e3 = abs ( z0 - z1 ) count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( ' \\n Solution: x= %0.3f , y= %0.3f and z = %0.3f \\n ' % ( x0 , y0 , z0 )) Metode Gauss Seidel \u00b6 Metode Gauss-Seidel merupakan metode yang digunakan untuk menyelesaikan sistem persamaan linear (SPL) berukuran besar dan proporsi koefisien nolnya besar. Metode Gauss-Seidel dikembangkan dari metode iterasi pada solusi persamaan tak linier. dibawah ini merupakan rumus dari metode gauss seidel: x_{i}^{\\left( k+1\\right) }=\\left( b_{i}-\\sum ^{i-1}_{j=1}a_{ij}x_{j}^{k+1}-\\sum ^{n}_{j=i+1}a_{ij}x_{j}^{k}\\right) /aii , k= 1,2,...,n Algoritma Code: deifinisikan dahulu persamaanya didalam code masukkan toleransi error yang diinginkan persamaannya akan diulang jika toleransi error dari hasil perulangan mendekati toleransi error yang diinginkan maka program akan berhenti Code: # Mendefinisikan persamaan linear yang akan diselesaikan # dengan menggunakan lambda function untuk mempersingkat function f1 = lambda x , y , z : ( 20 - 3 * y + z ) / 2 f2 = lambda x , y , z : ( 20 - 3 * x - z ) / 2 f3 = lambda x , y , z : ( 15 - x - 4 * y ) / 2 x0 = 0 y0 = 0 z0 = 0 count = 1 # Toleransi error yg diinginkan e = float ( input ( 'masukkan toleransi error: ' )) # Gauss Seidel print ( ' \\n Count \\t x \\t y \\t z \\n ' ) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x1 , y0 , z0 ) z1 = f3 ( x1 , y1 , z0 ) print ( ' %d \\t %0.4f \\t %0.4f \\t %0.4f \\n ' % ( count , x1 , y1 , z1 )) e1 = abs ( x0 - x1 ) e2 = abs ( y0 - y1 ) e3 = abs ( z0 - z1 ) count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( ' \\n Solution: x= %0.3f , y= %0.3f and z = %0.3f \\n ' % ( x0 , y0 , z0 )) Contoh Soal \u00b6 Tentukan nilai x, y dan z dari persamaan dibawah ini menggunakan metode eliminasi gauss ! 2x+3y-z = 20\\\\ 3x+2y+z = 20\\\\ x+4y+2z = 15\\\\ code: import numpy as np # n menunjukkan banyaknya variabel n = int ( input ( \"masukkan banyak variabel = \" )) # Membuat matrix 2D sesuai dengan total variable # dengan nilai matrix pertama di definisikan seluruhnya 0 a = np . zeros (( n , n + 1 )) # Membuat array 1D untuk menampung hasil solusi x = np . zeros ( n ) # inputan matriks print ( 'Masukkan nilai matriks: ' ) for i in range ( n ): for j in range ( n + 1 ): a [ i ][ j ] = float ( input ( '[' + str ( i ) + '][' + str ( j ) + ']= ' )) # eliminasi maju for i in range ( n ): for j in range ( i + 1 , n ): faktor = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - faktor * a [ i ][ k ] # substitusi mundur x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] # hasil print ( \"hasilnya adalah: \" ) for i in range ( n ): print ( 'X %d = %0.2f ' % ( i , x [ i ])) Output codenya: masukkan banyak variabel = 3 Masukkan nilai matriks : [ 0 ][ 0 ] = 2 [ 0 ][ 1 ] = 3 [ 0 ][ 2 ] = - 1 [ 0 ][ 3 ] = 20 [ 1 ][ 0 ] = 3 [ 1 ][ 1 ] = 2 [ 1 ][ 2 ] = 1 [ 1 ][ 3 ] = 20 [ 2 ][ 0 ] = 1 [ 2 ][ 1 ] = 4 [ 2 ][ 2 ] = 2 [ 2 ][ 3 ] = 15 hasilnya adalah : X0 = 5.00 X1 = 3.00 X2 = - 1.00 x0 sebagai x, x1 sebagai y, dan x2 sebagai z.","title":"Numerical Solution of System of Linear Algebraic Equations"},{"location":"spl/#materi_sistem_persamaan_linear","text":"","title":"Materi Sistem Persamaan Linear"},{"location":"spl/#pengertian_sistem_persamaan_linear","text":"Aljabar linier merupakan cabang dari ilmu matematika yang dapat diaplikasikan dalam berbagai bidang ilmu pengetahuan alam, teknik, komputer, dan masih banyak lagi. Sistem Persamaan Linier merupakan sebuah ungkapan kesamaan dengan menggunakan tanda \"=\" (sama dengan) yang melibatkan suatu konstanta, variabel dan operasi aritmatika. Menyelesaikan suatu sistem persamaan linier adalah mencari nilai-nilai dari sebuah variabel-variabel yang ada pada persamaan linear yang diberikan. Salah satu metode untuk menyelesaikan sistem persamaan linear adalah dengan menggunakan eliminasi gauss. Dibawah ini merupakan bentuk umum dari SPL (Sistem Persamaan Linear): a_{11}x_{1}+a_{12}x_{2}+...+a_{1n}x_{n} = b1\\\\ a_{21}x_{1}+a_{22}x_{2}+...+a_{2n}x_{n} = b2\\\\ a_{31}x_{1}+a_{32}x_{2}+...+a_{3n}x_{n} = b3\\\\ \\vdots\\\\ a_{n1}x_{1}+a_{n2}x_{2}+...+a_{2nn}x_{n} = bn\\\\","title":"Pengertian Sistem Persamaan Linear"},{"location":"spl/#metode_eliminasi_gauss","text":"Penyelesaian persamaan linier menggunakan metode eliminasi gauss yakni dengan mengurangi sistem persamaan kedalam bentuk segitiga atas sehingga salah satu persamaan tersebut hanya mengandung satu bilangan yang belum diketahui dan persamaan lainnya terdiri dari bilangan baru. Dalam proses penghitungan dengan menggunakan eliminasi gauss ada 2 tahap yaitu: Eliminasi maju, yaitu untuk membentuk matrix segitiga atas, gambar dibawah ini merupakan contoh segitiga atas. \\begin{pmatrix} a_{11}&a_{12}&a_{13}\\\\ 0&a_{22}&a_{23}\\\\ 0&0&a_{33}\\\\ \\end{pmatrix} Substitusi mundur yaitu penyelesaian dari variabel akhir yang ada didalam matrix segitiga atas.","title":"Metode Eliminasi Gauss"},{"location":"spl/#algoritma_dari_program_metode_gauss","text":"Masukkan inputan banyaknya variabel Masukkan nilai persamaannya ke dalam array Lalu proses perhitungannya dengan eliminasi maju Dilanjut dengan substitusi mundur lalu hasil akhirnya","title":"Algoritma dari program metode gauss"},{"location":"spl/#code","text":"import numpy as np # n menunjukkan banyaknya variabel n = int ( input ( \"masukkan banyak variabel = \" )) # Membuat matrix 2D sesuai dengan total variable # dengan nilai matrix pertama di definisikan seluruhnya 0 a = np . zeros (( n , n + 1 )) # Membuat array 1D untuk menampung hasil solusi x = np . zeros ( n ) # inputan matriks print ( 'Masukkan nilai matriks: ' ) for i in range ( n ): for j in range ( n + 1 ): a [ i ][ j ] = float ( input ( '[' + str ( i ) + '][' + str ( j ) + ']= ' )) # eliminasi maju for i in range ( n ): for j in range ( i + 1 , n ): faktor = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - faktor * a [ i ][ k ] # substitusi mundur x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] # hasil print ( \"hasilnya adalah: \" ) for i in range ( n ): print ( 'X %d = %0.2f ' % ( i , x [ i ]))","title":"Code"},{"location":"spl/#metode_jacobi","text":"Metode Iterasi Jacobi merupakan metode yang digunakan untuk menyelesaikan permasalahan Persamaan Linier dan sering dijumpai dalam berbagai disiplin ilmu. Metode Iterasi Jacobi merupakan metode tak langsung, yaitu bermula dari suatu hampiran penyelesaian awal dan selanjutnya berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen. Metode Jacobi digunakan untuk menyelesaikan persamaan linier berukuran besar dan proporsi koefisien nolnya besar. dibawah ini merupakan rumus dari metode jacobi: x_{i}^{\\left( k+1\\right) }=\\left( b_{i}-\\sum ^{i-1}_{j=1}a_{ij}x_{j}^{k}-\\sum ^{n}_{j=i+1}a_{ij}x_{j}^{k}\\right) /aii , k= 1,2,...,n Algoritma Code: deifinisikan dahulu persamaanya didalam code masukkan toleransi error yang diinginkan persamaannya akan diulang jika toleransi error dari hasil perulangan mendekati toleransi error yang diinginkan maka program akan berhenti Code: # Mendefinisikan persamaan linear yang akan diselesaikan # dengan menggunakan lambda function untuk mempersingkat function f1 = lambda x , y , z : ( 17 - y + 2 * z ) / 20 f2 = lambda x , y , z : ( - 18 - 3 * x + z ) / 20 f3 = lambda x , y , z : ( 25 - 2 * x + 3 * y ) / 20 x0 = 0 y0 = 0 z0 = 0 count = 1 # Toleransi error yg diinginkan e = float ( input ( 'Masukkan toleransi error: ' )) # Jacobi Iteration print ( ' \\n Count \\t x \\t y \\t z \\n ' ) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x0 , y0 , z0 ) z1 = f3 ( x0 , y0 , z0 ) print ( ' %d \\t %0.4f \\t %0.4f \\t %0.4f \\n ' % ( count , x1 , y1 , z1 )) e1 = abs ( x0 - x1 ) e2 = abs ( y0 - y1 ) e3 = abs ( z0 - z1 ) count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( ' \\n Solution: x= %0.3f , y= %0.3f and z = %0.3f \\n ' % ( x0 , y0 , z0 ))","title":"Metode Jacobi"},{"location":"spl/#metode_gauss_seidel","text":"Metode Gauss-Seidel merupakan metode yang digunakan untuk menyelesaikan sistem persamaan linear (SPL) berukuran besar dan proporsi koefisien nolnya besar. Metode Gauss-Seidel dikembangkan dari metode iterasi pada solusi persamaan tak linier. dibawah ini merupakan rumus dari metode gauss seidel: x_{i}^{\\left( k+1\\right) }=\\left( b_{i}-\\sum ^{i-1}_{j=1}a_{ij}x_{j}^{k+1}-\\sum ^{n}_{j=i+1}a_{ij}x_{j}^{k}\\right) /aii , k= 1,2,...,n Algoritma Code: deifinisikan dahulu persamaanya didalam code masukkan toleransi error yang diinginkan persamaannya akan diulang jika toleransi error dari hasil perulangan mendekati toleransi error yang diinginkan maka program akan berhenti Code: # Mendefinisikan persamaan linear yang akan diselesaikan # dengan menggunakan lambda function untuk mempersingkat function f1 = lambda x , y , z : ( 20 - 3 * y + z ) / 2 f2 = lambda x , y , z : ( 20 - 3 * x - z ) / 2 f3 = lambda x , y , z : ( 15 - x - 4 * y ) / 2 x0 = 0 y0 = 0 z0 = 0 count = 1 # Toleransi error yg diinginkan e = float ( input ( 'masukkan toleransi error: ' )) # Gauss Seidel print ( ' \\n Count \\t x \\t y \\t z \\n ' ) condition = True while condition : x1 = f1 ( x0 , y0 , z0 ) y1 = f2 ( x1 , y0 , z0 ) z1 = f3 ( x1 , y1 , z0 ) print ( ' %d \\t %0.4f \\t %0.4f \\t %0.4f \\n ' % ( count , x1 , y1 , z1 )) e1 = abs ( x0 - x1 ) e2 = abs ( y0 - y1 ) e3 = abs ( z0 - z1 ) count += 1 x0 = x1 y0 = y1 z0 = z1 condition = e1 > e and e2 > e and e3 > e print ( ' \\n Solution: x= %0.3f , y= %0.3f and z = %0.3f \\n ' % ( x0 , y0 , z0 ))","title":"Metode Gauss Seidel"},{"location":"spl/#contoh_soal","text":"Tentukan nilai x, y dan z dari persamaan dibawah ini menggunakan metode eliminasi gauss ! 2x+3y-z = 20\\\\ 3x+2y+z = 20\\\\ x+4y+2z = 15\\\\ code: import numpy as np # n menunjukkan banyaknya variabel n = int ( input ( \"masukkan banyak variabel = \" )) # Membuat matrix 2D sesuai dengan total variable # dengan nilai matrix pertama di definisikan seluruhnya 0 a = np . zeros (( n , n + 1 )) # Membuat array 1D untuk menampung hasil solusi x = np . zeros ( n ) # inputan matriks print ( 'Masukkan nilai matriks: ' ) for i in range ( n ): for j in range ( n + 1 ): a [ i ][ j ] = float ( input ( '[' + str ( i ) + '][' + str ( j ) + ']= ' )) # eliminasi maju for i in range ( n ): for j in range ( i + 1 , n ): faktor = a [ j ][ i ] / a [ i ][ i ] for k in range ( n + 1 ): a [ j ][ k ] = a [ j ][ k ] - faktor * a [ i ][ k ] # substitusi mundur x [ n - 1 ] = a [ n - 1 ][ n ] / a [ n - 1 ][ n - 1 ] for i in range ( n - 2 , - 1 , - 1 ): x [ i ] = a [ i ][ n ] for j in range ( i + 1 , n ): x [ i ] = x [ i ] - a [ i ][ j ] * x [ j ] x [ i ] = x [ i ] / a [ i ][ i ] # hasil print ( \"hasilnya adalah: \" ) for i in range ( n ): print ( 'X %d = %0.2f ' % ( i , x [ i ])) Output codenya: masukkan banyak variabel = 3 Masukkan nilai matriks : [ 0 ][ 0 ] = 2 [ 0 ][ 1 ] = 3 [ 0 ][ 2 ] = - 1 [ 0 ][ 3 ] = 20 [ 1 ][ 0 ] = 3 [ 1 ][ 1 ] = 2 [ 1 ][ 2 ] = 1 [ 1 ][ 3 ] = 20 [ 2 ][ 0 ] = 1 [ 2 ][ 1 ] = 4 [ 2 ][ 2 ] = 2 [ 2 ][ 3 ] = 15 hasilnya adalah : X0 = 5.00 X1 = 3.00 X2 = - 1.00 x0 sebagai x, x1 sebagai y, dan x2 sebagai z.","title":"Contoh Soal"},{"location":"turunan/","text":"Materi Turunan Numerik \u00b6 Pengertian Turunan \u00b6 Turunan adalah suatu perhitungan terhadap perubahan nilai fungsi f(x) karena perubahan nilai input (variabel). Turunan mempunyai nama lain yaitu diferensial, sedangkan proses untuk menentukan turunan suatu fungsi disebut dengan diferensiasi. f'\\left( x\\right) =\\lim _{h\\rightarrow 0}\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h} turunan fungsi ini didefinisikan sebagai limit dari perubahan rata-rata dari nilai fungsi terhadap variabel x. Persoalan Turunan Numerik \u00b6 Persoalan turunan numerik adalah menentukan hampiran nilai turunan suatu fungsi f(x) yang diberikan dalam bentuk tabel. Berikut ini adalah tiga pendekatan dalam menyelesaikan persoalan turunan numerik : Hampiran selisih maju Hampiran selisih mundur Hampiran selisih pusat Hampiran Selisih Maju \u00b6 Hampiran selisih maju menggunakan titik di depan fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan : \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h}\\\\ \\end{aligned} atau bisa dituliskan sebagai berikut : f'\\left( x\\right) =\\dfrac{f_{1}-f_{0}}{h} berikut ini adalah code program dari rumus diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih maju hampiran_maju = ( y [ xp + 1 ] - y [ xp ]) / h # hasil print ( \"hampiran selisih maju untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_maju )) Hampiran Selisih Mundur \u00b6 Hampiran selisih mundur menggunakan titik di belakang fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan : \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x\\right) -f\\left( x-h\\right) }{h}\\\\ \\end{aligned} Atau bisa dituliskan sebagai berikut : f'\\left( x\\right) =\\dfrac{f_{0}-f_{-1}}{h} Berikut ini adalah code program dari persamaan diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih mundur hampiran_mundur = ( y [ xp ] - y [ xp - 1 ]) / h # hasil print ( \"hampiran selisih mundur untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_mundur )) Hampiran Seilisih Pusat \u00b6 Hampiran selisih pusat menggunakan titik di depan dan di belakang fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan: \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x+h\\right) -f\\left( x-h\\right) }{2h}\\\\ \\end{aligned} Atau bisa dituliskan sebagai berikut: f'\\left( x\\right) =\\dfrac{f_{1}-f_{-1}}{2h} berikut ini adalah code program dari persamaan diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih pusat hampiran_pusat = ( y [ xp + 1 ] - y [ xp - 1 ]) / ( 2 * h ) # hasil print ( \"hampiran selisih pusat untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_pusat )) Contoh Soal \u00b6 Diberikan data dalam bentuk tabel sebagai berikut: x f(x) 1.3 3.669 1.5 4.482 1.7 5.474 1.9 6.686 2.1 8.166 2.3 9.974 2.5 12.182 Hitunglah f'(1.7) dengan rumus hampiran selisih pusat ! Hitunglah f'(1.3) dengan rumus hampiran selisih maju ! Hitunglah f'(2.5) dengan rumus hampiran selisih mundur ! Penyelesaian 1) Hampiran selisih pusat: f_{0}'=\\dfrac{f_{1}-f_{-1}}{2h} Ambil titik-titik x-\u2081 = 1.5 dan x\u2081 = 1.9, karena yang dicari x\u2080 = 1.7 terletak di tengah keduanya dengan h = 0.2 f'\\left( 1.7\\right) =\\dfrac{6.686-4.482}{2\\left( 0.2\\right) }=5.510 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih pusat hampiran_pusat = ( y [ xp + 1 ] - y [ xp - 1 ]) / ( 2 * h ) # hasil print ( \"hampiran selisih pusat untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_pusat )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1.3 y [ 0 ] = 3.669 x [ 1 ] = 1.5 y [ 1 ] = 4.482 x [ 2 ] = 1.7 y [ 2 ] = 5.474 x [ 3 ] = 1.9 y [ 3 ] = 6.686 x [ 4 ] = 2.1 y [ 4 ] = 8.166 x [ 5 ] = 2.3 y [ 5 ] = 9.974 x [ 6 ] = 2.5 y [ 6 ] = 12.182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 2 hampiran selisih pusat untuk x = 1.7000 adalah 5.5100 2) Hampiran selisih maju: f_{0}'=\\dfrac{f_{1}-f_{0}}{h} Karena dicari x\u2080 = 1.3 maka x\u2081 = 1.5 dengan h = 0.2 f'\\left( 1.3\\right) =\\dfrac{4.482-3.669}{0.2}=4.065 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih maju hampiran_maju = ( y [ xp + 1 ] - y [ xp ]) / h # hasil print ( \"hampiran selisih maju untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_maju )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1.3 y [ 0 ] = 3.669 x [ 1 ] = 1.5 y [ 1 ] = 4.482 x [ 2 ] = 1.7 y [ 2 ] = 5.474 x [ 3 ] = 1.9 y [ 3 ] = 6.686 x [ 4 ] = 2.1 y [ 4 ] = 8.166 x [ 5 ] = 2.3 y [ 5 ] = 9.974 x [ 6 ] = 2.5 y [ 6 ] = 12.182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 0 hampiran selisih maju untuk x = 1.3000 adalah 4.0650 3) Hampiran selisih mundur: f_{0}'=\\dfrac{f_{0}-f_{-1}}{h} Karena dicari x\u2080 = 2.5 maka x-\u2081 = 2.3 dengan h = 0.2 f'\\left( 2.5\\right) =\\dfrac{12.182-9.974}{0.2}=11.04 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih mundur hampiran_mundur = ( y [ xp ] - y [ xp - 1 ]) / h # hasil print ( \"hampiran selisih mundur untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_mundur )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1 . 3 y [ 0 ] = 3 . 669 x [ 1 ] = 1 . 5 y [ 1 ] = 4 . 482 x [ 2 ] = 1 . 7 y [ 2 ] = 5 . 474 x [ 3 ] = 1 . 9 y [ 3 ] = 6 . 686 x [ 4 ] = 2 . 1 y [ 4 ] = 8 . 166 x [ 5 ] = 2 . 3 y [ 5 ] = 9 . 974 x [ 6 ] = 2 . 5 y [ 6 ] = 12 . 182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 6 hampiran selisih mundur untuk x = 2 . 5000 adalah 11 . 0400","title":"Materi Turunan Numerik"},{"location":"turunan/#materi_turunan_numerik","text":"","title":"Materi Turunan Numerik"},{"location":"turunan/#pengertian_turunan","text":"Turunan adalah suatu perhitungan terhadap perubahan nilai fungsi f(x) karena perubahan nilai input (variabel). Turunan mempunyai nama lain yaitu diferensial, sedangkan proses untuk menentukan turunan suatu fungsi disebut dengan diferensiasi. f'\\left( x\\right) =\\lim _{h\\rightarrow 0}\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h} turunan fungsi ini didefinisikan sebagai limit dari perubahan rata-rata dari nilai fungsi terhadap variabel x.","title":"Pengertian Turunan"},{"location":"turunan/#persoalan_turunan_numerik","text":"Persoalan turunan numerik adalah menentukan hampiran nilai turunan suatu fungsi f(x) yang diberikan dalam bentuk tabel. Berikut ini adalah tiga pendekatan dalam menyelesaikan persoalan turunan numerik : Hampiran selisih maju Hampiran selisih mundur Hampiran selisih pusat","title":"Persoalan Turunan Numerik"},{"location":"turunan/#hampiran_selisih_maju","text":"Hampiran selisih maju menggunakan titik di depan fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan : \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h}\\\\ \\end{aligned} atau bisa dituliskan sebagai berikut : f'\\left( x\\right) =\\dfrac{f_{1}-f_{0}}{h} berikut ini adalah code program dari rumus diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih maju hampiran_maju = ( y [ xp + 1 ] - y [ xp ]) / h # hasil print ( \"hampiran selisih maju untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_maju ))","title":"Hampiran Selisih Maju"},{"location":"turunan/#hampiran_selisih_mundur","text":"Hampiran selisih mundur menggunakan titik di belakang fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan : \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x\\right) -f\\left( x-h\\right) }{h}\\\\ \\end{aligned} Atau bisa dituliskan sebagai berikut : f'\\left( x\\right) =\\dfrac{f_{0}-f_{-1}}{h} Berikut ini adalah code program dari persamaan diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih mundur hampiran_mundur = ( y [ xp ] - y [ xp - 1 ]) / h # hasil print ( \"hampiran selisih mundur untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_mundur ))","title":"Hampiran Selisih Mundur"},{"location":"turunan/#hampiran_seilisih_pusat","text":"Hampiran selisih pusat menggunakan titik di depan dan di belakang fungsi x yang dituju untuk menghitung selisihnya, seperti diilustrasikan pada gambar di bawah ini. Seperti yang tertera pada gambar diatas, nilai turunan f\u2019(x) akan didekati dengan: \\begin{aligned}f'\\left( x\\right) \\cong \\dfrac{\\Delta f\\left( x\\right) }{\\Delta x}=\\dfrac{f\\left( x+h\\right) -f\\left( x-h\\right) }{2h}\\\\ \\end{aligned} Atau bisa dituliskan sebagai berikut: f'\\left( x\\right) =\\dfrac{f_{1}-f_{-1}}{2h} berikut ini adalah code program dari persamaan diatas: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih pusat hampiran_pusat = ( y [ xp + 1 ] - y [ xp - 1 ]) / ( 2 * h ) # hasil print ( \"hampiran selisih pusat untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_pusat ))","title":"Hampiran Seilisih Pusat"},{"location":"turunan/#contoh_soal","text":"Diberikan data dalam bentuk tabel sebagai berikut: x f(x) 1.3 3.669 1.5 4.482 1.7 5.474 1.9 6.686 2.1 8.166 2.3 9.974 2.5 12.182 Hitunglah f'(1.7) dengan rumus hampiran selisih pusat ! Hitunglah f'(1.3) dengan rumus hampiran selisih maju ! Hitunglah f'(2.5) dengan rumus hampiran selisih mundur ! Penyelesaian 1) Hampiran selisih pusat: f_{0}'=\\dfrac{f_{1}-f_{-1}}{2h} Ambil titik-titik x-\u2081 = 1.5 dan x\u2081 = 1.9, karena yang dicari x\u2080 = 1.7 terletak di tengah keduanya dengan h = 0.2 f'\\left( 1.7\\right) =\\dfrac{6.686-4.482}{2\\left( 0.2\\right) }=5.510 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih pusat hampiran_pusat = ( y [ xp + 1 ] - y [ xp - 1 ]) / ( 2 * h ) # hasil print ( \"hampiran selisih pusat untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_pusat )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1.3 y [ 0 ] = 3.669 x [ 1 ] = 1.5 y [ 1 ] = 4.482 x [ 2 ] = 1.7 y [ 2 ] = 5.474 x [ 3 ] = 1.9 y [ 3 ] = 6.686 x [ 4 ] = 2.1 y [ 4 ] = 8.166 x [ 5 ] = 2.3 y [ 5 ] = 9.974 x [ 6 ] = 2.5 y [ 6 ] = 12.182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 2 hampiran selisih pusat untuk x = 1.7000 adalah 5.5100 2) Hampiran selisih maju: f_{0}'=\\dfrac{f_{1}-f_{0}}{h} Karena dicari x\u2080 = 1.3 maka x\u2081 = 1.5 dengan h = 0.2 f'\\left( 1.3\\right) =\\dfrac{4.482-3.669}{0.2}=4.065 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih maju hampiran_maju = ( y [ xp + 1 ] - y [ xp ]) / h # hasil print ( \"hampiran selisih maju untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_maju )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1.3 y [ 0 ] = 3.669 x [ 1 ] = 1.5 y [ 1 ] = 4.482 x [ 2 ] = 1.7 y [ 2 ] = 5.474 x [ 3 ] = 1.9 y [ 3 ] = 6.686 x [ 4 ] = 2.1 y [ 4 ] = 8.166 x [ 5 ] = 2.3 y [ 5 ] = 9.974 x [ 6 ] = 2.5 y [ 6 ] = 12.182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 0 hampiran selisih maju untuk x = 1.3000 adalah 4.0650 3) Hampiran selisih mundur: f_{0}'=\\dfrac{f_{0}-f_{-1}}{h} Karena dicari x\u2080 = 2.5 maka x-\u2081 = 2.3 dengan h = 0.2 f'\\left( 2.5\\right) =\\dfrac{12.182-9.974}{0.2}=11.04 Berikut ini adalah code programnya: import numpy as np import math # jumlah kolom tabel n = int ( input ( 'masukkan jumlah kolom: ' )) # array untuk tabel x berarti x , y berarti f(x) x = np . zeros (( n )) y = np . zeros (( n )) # input data tabel print ( 'Enter data for x and y: ' ) for i in range ( n ): x [ i ] = float ( input ( 'x[' + str ( i ) + ']=' )) y [ i ] = float ( input ( 'y[' + str ( i ) + ']=' )) # input x berapa yang dicari xp = int ( input ( \"masukkan x yang anda cari (kolom dimulai dari 0,1,2 dst.) : \" )) # nilai h h = x [ 1 ] - x [ 0 ] # hampiran selisih mundur hampiran_mundur = ( y [ xp ] - y [ xp - 1 ]) / h # hasil print ( \"hampiran selisih mundur untuk x = %0.4f adalah %0.4f \" % ( x [ xp ], hampiran_mundur )) masukkan jumlah kolom : 7 Enter data for x and y : x [ 0 ] = 1 . 3 y [ 0 ] = 3 . 669 x [ 1 ] = 1 . 5 y [ 1 ] = 4 . 482 x [ 2 ] = 1 . 7 y [ 2 ] = 5 . 474 x [ 3 ] = 1 . 9 y [ 3 ] = 6 . 686 x [ 4 ] = 2 . 1 y [ 4 ] = 8 . 166 x [ 5 ] = 2 . 3 y [ 5 ] = 9 . 974 x [ 6 ] = 2 . 5 y [ 6 ] = 12 . 182 masukkan x yang anda cari ( kolom dimulai dari 0 , 1 , 2 dst . ) : 6 hampiran selisih mundur untuk x = 2 . 5000 adalah 11 . 0400","title":"Contoh Soal"},{"location":"extensions/code-hilite/","text":"CodeHilite \u00b6 CodeHilite - Material for MkDocs Supported languages - Pygments Configure mkdocs.yml \u00b6 markdown_extensions: - codehilite","title":"CodeHilite"},{"location":"extensions/code-hilite/#codehilite","text":"CodeHilite - Material for MkDocs Supported languages - Pygments","title":"CodeHilite"},{"location":"extensions/code-hilite/#configure_mkdocsyml","text":"markdown_extensions: - codehilite","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/","text":"Footnote \u00b6 Footnotes - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - footnotes Example \u00b6 Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Footnote"},{"location":"extensions/footnote/#footnote","text":"Footnotes - Material for MkDocs","title":"Footnote"},{"location":"extensions/footnote/#configure_mkdocsyml","text":"markdown_extensions: - footnotes","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/#example","text":"Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Example"},{"location":"extensions/mathjax/","text":"MathJax \u00b6 PyMdown - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - mdx_math: enable_dollar_delimiter: True Example code \u00b6 $$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$ Example rendering \u00b6 P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"MathJax"},{"location":"extensions/mathjax/#mathjax","text":"PyMdown - Material for MkDocs","title":"MathJax"},{"location":"extensions/mathjax/#configure_mkdocsyml","text":"markdown_extensions: - mdx_math: enable_dollar_delimiter: True","title":"Configure mkdocs.yml"},{"location":"extensions/mathjax/#example_code","text":"$$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$","title":"Example code"},{"location":"extensions/mathjax/#example_rendering","text":"P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"Example rendering"},{"location":"getting-started/docker/","text":"Start with Docker \u00b6 Public docker image \u00b6 Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub docker-compose \u00b6 Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"Start with Docker"},{"location":"getting-started/docker/#start_with_docker","text":"","title":"Start with Docker"},{"location":"getting-started/docker/#public_docker_image","text":"Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub","title":"Public docker image"},{"location":"getting-started/docker/#docker-compose","text":"Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"docker-compose"},{"location":"getting-started/download-boilerplate/","text":"Download boilerplate \u00b6 Git clone \u00b6 git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate Download zip \u00b6 wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#download_boilerplate","text":"","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#git_clone","text":"git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate","title":"Git clone"},{"location":"getting-started/download-boilerplate/#download_zip","text":"wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download zip"},{"location":"getting-started/invoke/","text":"Serve and open with invoke \u00b6 invoke \u00b6 Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution. Serve and open \u00b6 Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml Show all tasks \u00b6 $ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#serve_and_open_with_invoke","text":"","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#invoke","text":"Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution.","title":"invoke"},{"location":"getting-started/invoke/#serve_and_open","text":"Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml","title":"Serve and open"},{"location":"getting-started/invoke/#show_all_tasks","text":"$ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Show all tasks"},{"location":"getting-started/pip/","text":"Start with pip (Anaconda, Miniconda) \u00b6 pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pip/#start_with_pip_anaconda_miniconda","text":"pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pipenv/","text":"Start with pipenv \u00b6 pipenv \u00b6 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages \u00b6 pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs \u00b6 pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run \u00b6 pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"getting-started/pipenv/#start_with_pipenv","text":"","title":"Start with pipenv"},{"location":"getting-started/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"getting-started/pipenv/#install_all_packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"getting-started/pipenv/#run_mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"getting-started/pipenv/#pipenv_run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"hosting-and-deployment/aws-amplify-console/","text":"Host on AWS Amplify Console \u00b6 AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/aws-amplify-console/#host_on_aws_amplify_console","text":"AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/combinations/","text":"Hosting and Deployment \u00b6 GitHub Pages and GitHub \u00b6 Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab \u00b6 Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify \u00b6 Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console \u00b6 Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#hosting_and_deployment","text":"","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#github_pages_and_github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"hosting-and-deployment/combinations/#gitlab_pages_and_gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"hosting-and-deployment/combinations/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"hosting-and-deployment/combinations/#aws_amplify_console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"hosting-and-deployment/github-pages/","text":"Host on GitHub Pages \u00b6 Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions \u00b6 peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy \u00b6 pipenv \u00b6 pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#host_on_github_pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_github_actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_mkdocs_gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/github-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"pipenv"},{"location":"hosting-and-deployment/gitlab-pages/","text":"Host on GitLab Pages \u00b6 See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/gitlab-pages/#host_on_gitlab_pages","text":"See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/netlify/","text":"Host on Netlify \u00b6 Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"},{"location":"hosting-and-deployment/netlify/#host_on_netlify","text":"Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"}]}